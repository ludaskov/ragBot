import os
import uuid
import chardet
import logging
from telegram import Update
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters,
    CallbackContext
)
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_chroma import Chroma
from langchain_huggingface import HuggingFaceEmbeddings
from langchain.schema import Document

from langchain_together import ChatTogether
from langchain.chains import RetrievalQA
from langchain.prompts import PromptTemplate
import asyncio
from langchain.prompts import PromptTemplate

logging.basicConfig(
    format='%(asctime)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    filename='bot.log',  
    filemode='a'
)
logger = logging.getLogger(__name__)

# –ü—É—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ
CHROMA_PATH = "chroma_db"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤, —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∏ llm
embedding_model = HuggingFaceEmbeddings(
    model_name="intfloat/multilingual-e5-base",
    model_kwargs={"device": "cpu"},
    encode_kwargs={"normalize_embeddings": True}
)
vectorstore = Chroma(persist_directory=CHROMA_PATH, embedding_function=embedding_model)

llm = ChatTogether(
    model="mistralai/Mistral-7B-Instruct-v0.1",
    together_api_key="3af52120bb258bd70f2c3a692ee58d9adb37e7052a166383a8444e468cdb5e2e",  # —Å—é–¥–∞ –≤—Å—Ç–∞–≤—å —Å–≤–æ–π –∫–ª—é—á
    temperature=0.4
)

template = """
–¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã. –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç —è–≤–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–Ω—è—Ç—å –Ω–∞–º—ë–∫–∏, –º–µ—Ç–∞—Ñ–æ—Ä—ã –∏ –æ–ø–∏—Å–∞–Ω–∏—è. –ï—Å–ª–∏ –≤—Å—ë —Ä–∞–≤–Ω–æ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è ‚Äî —Å–∫–∞–∂–∏ "–Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à—ë–ª".

–ö–æ–Ω—Ç–µ–∫—Å—Ç:
===========
{context}
===========

–í–æ–ø—Ä–æ—Å: {question}

–û—Ç–≤–µ—Ç:
"""

prompt = PromptTemplate(
    template=template,
    input_variables=["context", "question"]
)

qa_chain = RetrievalQA.from_chain_type(
    llm=llm,
    chain_type="stuff",
    retriever=vectorstore.as_retriever(search_kwargs={"k": 5}),
    return_source_documents=True,
    chain_type_kwargs={
        "prompt": prompt,
        "document_variable_name": "context"
    }
)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
async def handle_file(update: Update, context: CallbackContext):
    user_id = str(update.message.from_user.id)
    doc = update.message.document
    logger.info(f"User {user_id} uploaded file: {doc.file_name}")

    if not doc.file_name.endswith(".txt"):
        logger.warning(f"User {user_id} uploaded unsupported file type.")
        await update.message.reply_text("–ü–æ–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ .txt —Ñ–∞–π–ª—ã.")
        return

    # –û—Ç–ø—Ä–∞–≤–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, —á—Ç–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    status_message = await update.message.reply_text("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ, —Ñ–∞–π–ª –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...")

    file = await doc.get_file()
    file_path = f"temp_{uuid.uuid4()}.txt"
    await file.download_to_drive(file_path)
    logger.info(f"Downloaded file to {file_path}")

    # –û–ø—Ä–µ–¥–µ–ª–∏–º –∫–æ–¥–∏—Ä–æ–≤–∫—É
    with open(file_path, "rb") as f:
        raw_data = f.read()
        result = chardet.detect(raw_data)
        encoding = result["encoding"] or "utf-8"  # fallback

    try:
        text = raw_data.decode(encoding)
    except UnicodeDecodeError:
        logger.error(f"Decoding error for user {user_id} with encoding {encoding}")
        await status_message.edit_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª (–∫–æ–¥–∏—Ä–æ–≤–∫–∞: {encoding}).")
        os.remove(file_path)
        return

    os.remove(file_path)
    logger.info(f"File {file_path} removed after decoding.")

    # –ß–∞–Ω–∫–∏–Ω–≥
    splitter = RecursiveCharacterTextSplitter(chunk_size=500, chunk_overlap=50)
    chunks = splitter.create_documents([text], metadatas=[{"user_id": user_id}])
    logger.info(f"Created {len(chunks)} chunks for user {user_id}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Chroma
    vectorstore.add_documents(chunks)
    logger.info(f"Chunks added to vectorstore for user {user_id}")

    await status_message.edit_text(f"‚úÖ –§–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É ({len(chunks)} —á–∞–Ω–∫–æ–≤).")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
async def handle_query(update: Update, context: CallbackContext):
    query = update.message.text
    user_id = str(update.message.from_user.id)
    logger.info(f"User {user_id} submitted query: {query}")

    qa_chain.retriever.search_kwargs["filter"] = {"user_id": user_id}

    result = await asyncio.to_thread(lambda: qa_chain.invoke({"query": query}))

    answer = result["result"]
    source_docs = result.get("source_documents", [])

    citations = "\n\n---\n".join(
        f"üìÑ {doc.page_content[:300]}..." for doc in source_docs if doc.metadata.get("user_id") == user_id
    )

    if not citations.strip():
        logger.warning(f"No relevant sources found for user {user_id}'s query.")
        await update.message.reply_text("–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å.")
        return

    final_response = f"–û—Ç–≤–µ—Ç:\n{answer}\n\nüìö –ò—Å—Ç–æ—á–Ω–∏–∫–∏:\n{citations}"
    logger.info(f"Sending answer to user {user_id}")
    await update.message.reply_text(final_response[:4096])

# –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ user_id
async def handle_delete(update: Update, context: CallbackContext):
    user_id = str(update.message.from_user.id)
    logger.info(f"User {user_id} requested deletion of their documents.")
    # –£–¥–∞–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å –º–µ—Ç–∞–¥–∞—Ç–æ–π user_id –∏–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    try:
        vectorstore._collection.delete(where={"user_id": user_id})
        logger.info(f"Documents deleted for user {user_id}")
        await update.message.reply_text("–í–∞—à–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–∞–∑—ã.")
    except Exception as e:
        logger.error(f"Error deleting documents for user {user_id}: {e}")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /help
async def handle_help(update: Update, context: CallbackContext):
    user_id = str(update.message.from_user.id)
    logger.info(f"User {user_id} requested help.")
    help_text = """
üìå <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:</b>

1. üìÑ –û—Ç–ø—Ä–∞–≤—å <b>.txt-—Ñ–∞–π–ª</b> ‚Äî –æ–Ω –±—É–¥–µ—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π.
2. ‚ùì –ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å ‚Äî –±–æ—Ç –Ω–∞–π–¥—ë—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.
3. üóëÔ∏è –ö–æ–º–∞–Ω–¥–∞ <b>/delete</b> —É–¥–∞–ª–∏—Ç –≤—Å–µ —Ç–≤–æ–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã.
4. ‚ÑπÔ∏è –ö–æ–º–∞–Ω–¥–∞ <b>/help</b> ‚Äî –ø–æ–∫–∞–∂–µ—Ç —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É.

–§–æ—Ä–º–∞—Ç: —Ç–æ–ª—å–∫–æ .txt, —è–∑—ã–∫: —Ä—É—Å—Å–∫–∏–π.

–ü—Ä–∏–º–µ—Ä:
‚Äî –ó–∞–≥—Ä—É–∑–∏ ¬´–ú–∞—Å—Ç–µ—Ä –∏ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞.txt¬ª
‚Äî –°–ø—Ä–æ—Å–∏: <i>¬´–°–∫–æ–ª—å–∫–æ –ª–µ—Ç –ú–∞—Ä–≥–∞—Ä–∏—Ç–µ?¬ª</i>

üîê –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ –∏ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ —Ç–≤–æ–µ–º—É Telegram ID.
"""
    await update.message.reply_text(help_text, parse_mode="HTML")

def main():
    TOKEN = "7759875570:AAFM7nXGtnsOfpGCZEc3n8Dc912NKTmKm5w"
    app = Application.builder().token(TOKEN).build()

    app.add_handler(MessageHandler(filters.Document.TEXT, handle_file))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_query))
    app.add_handler(CommandHandler("start", lambda u, c: u.message.reply_text("–ü—Ä–∏—à–ª–∏ .txt —Ñ–∞–π–ª –∏–ª–∏ –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å! –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏, –≤—ã–∑–æ–≤–∏ /help.")))
    app.add_handler(CommandHandler("delete", handle_delete))
    app.add_handler(CommandHandler("help", handle_help))

    logger.info("RAG Telegram bot started...")
    print("RAG-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())